// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/health/v1/health.proto

package healthpb

import (
	context "context"
	errors "errors"
	rerpc "github.com/rerpc/rerpc"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// HealthClientReRPC is a client for the internal.health.v1.Health service.
type HealthClientReRPC interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(ctx context.Context, req *HealthCheckRequest, opts ...rerpc.CallOption) (*HealthCheckResponse, error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(ctx context.Context, req *HealthCheckRequest, opts ...rerpc.CallOption) (*HealthClientReRPC_Watch, error)
}

type healthClientReRPC struct {
	doer    rerpc.Doer
	baseURL string
	options []rerpc.CallOption
}

// NewHealthClientReRPC constructs a client for the internal.health.v1.Health
// service. Call options passed here apply to all calls made with this client.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/grpc).
func NewHealthClientReRPC(baseURL string, doer rerpc.Doer, opts ...rerpc.CallOption) HealthClientReRPC {
	return &healthClientReRPC{
		baseURL: strings.TrimRight(baseURL, "/"),
		doer:    doer,
		options: opts,
	}
}

func (c *healthClientReRPC) mergeOptions(opts []rerpc.CallOption) []rerpc.CallOption {
	merged := make([]rerpc.CallOption, 0, len(c.options)+len(opts))
	for _, o := range c.options {
		merged = append(merged, o)
	}
	for _, o := range opts {
		merged = append(merged, o)
	}
	return merged
}

// Check calls internal.health.v1.Health.Check. Call options passed here apply
// only to this call.
func (c *healthClientReRPC) Check(ctx context.Context, req *HealthCheckRequest, opts ...rerpc.CallOption) (*HealthCheckResponse, error) {
	merged := c.mergeOptions(opts)
	ic := rerpc.ConfiguredCallInterceptor(merged)
	ctx, call := rerpc.NewCall(
		ctx,
		c.doer,
		rerpc.StreamTypeUnary,
		c.baseURL,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Check",              // protobuf method
		merged...,
	)
	wrapped := rerpc.Func(func(ctx context.Context, msg interface{}) (interface{}, error) {
		stream := call(ctx)
		if err := stream.Send(req); err != nil {
			_ = stream.CloseSend(err)
			_ = stream.CloseReceive()
			return nil, err
		}
		if err := stream.CloseSend(nil); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		var res HealthCheckResponse
		if err := stream.Receive(&res); err != nil {
			_ = stream.CloseReceive()
			return nil, err
		}
		return &res, stream.CloseReceive()
	})
	if ic != nil {
		wrapped = ic.Wrap(wrapped)
	}
	res, err := wrapped(ctx, req)
	if err != nil {
		return nil, err
	}
	typed, ok := res.(*HealthCheckResponse)
	if !ok {
		return nil, rerpc.Errorf(rerpc.CodeInternal, "expected response to be internal.health.v1.HealthCheckResponse, got %T", res)
	}
	return typed, nil
}

// Watch calls internal.health.v1.Health.Watch. Call options passed here apply
// only to this call.
func (c *healthClientReRPC) Watch(ctx context.Context, req *HealthCheckRequest, opts ...rerpc.CallOption) (*HealthClientReRPC_Watch, error) {
	merged := c.mergeOptions(opts)
	ic := rerpc.ConfiguredCallInterceptor(merged)
	ctx, call := rerpc.NewCall(
		ctx,
		c.doer,
		rerpc.StreamTypeServer,
		c.baseURL,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Watch",              // protobuf method
		merged...,
	)
	if ic != nil {
		call = ic.WrapStream(call)
	}
	stream := call(ctx)
	if err := stream.Send(req); err != nil {
		_ = stream.CloseSend(err)
		_ = stream.CloseReceive()
		return nil, err
	}
	if err := stream.CloseSend(nil); err != nil {
		_ = stream.CloseReceive()
		return nil, err
	}
	return NewHealthClientReRPC_Watch(stream), nil
}

// HealthReRPC is a server for the internal.health.v1.Health service. To make
// sure that adding methods to this protobuf service doesn't break all
// implementations of this interface, all implementations must embed
// UnimplementedHealthReRPC.
//
// By default, recent versions of grpc-go have a similar forward compatibility
// requirement. See https://github.com/grpc/grpc-go/issues/3794 for a longer
// discussion.
type HealthReRPC interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *HealthCheckRequest, *HealthReRPC_Watch) error
	mustEmbedUnimplementedHealthReRPC()
}

// NewHealthHandlerReRPC wraps each method on the service implementation in a
// *rerpc.Handler. The returned slice can be passed to rerpc.NewServeMux.
func NewHealthHandlerReRPC(svc HealthReRPC, opts ...rerpc.HandlerOption) []*rerpc.Handler {
	handlers := make([]*rerpc.Handler, 0, 2)
	ic := rerpc.ConfiguredHandlerInterceptor(opts)

	checkFunc := rerpc.Func(func(ctx context.Context, req interface{}) (interface{}, error) {
		typed, ok := req.(*HealthCheckRequest)
		if !ok {
			return nil, rerpc.Errorf(
				rerpc.CodeInternal,
				"can't call internal.health.v1.Health.Check with a %T",
				req,
			)
		}
		return svc.Check(ctx, typed)
	})
	if ic != nil {
		checkFunc = ic.Wrap(checkFunc)
	}
	check := rerpc.NewHandler(
		rerpc.StreamTypeUnary,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Check",              // protobuf method
		func(ctx context.Context, sf rerpc.StreamFunc) {
			stream := sf(ctx)
			defer stream.CloseReceive()
			if err := ctx.Err(); err != nil {
				if errors.Is(err, context.Canceled) {
					_ = stream.CloseSend(rerpc.Wrap(rerpc.CodeCanceled, err))
					return
				}
				if errors.Is(err, context.DeadlineExceeded) {
					_ = stream.CloseSend(rerpc.Wrap(rerpc.CodeDeadlineExceeded, err))
					return
				}
				_ = stream.CloseSend(err) // unreachable per context docs
			}
			var req HealthCheckRequest
			if err := stream.Receive(&req); err != nil {
				_ = stream.CloseSend(err)
				return
			}
			res, err := checkFunc(ctx, &req)
			if err != nil {
				if _, ok := rerpc.AsError(err); !ok {
					if errors.Is(err, context.Canceled) {
						err = rerpc.Wrap(rerpc.CodeCanceled, err)
					}
					if errors.Is(err, context.DeadlineExceeded) {
						err = rerpc.Wrap(rerpc.CodeDeadlineExceeded, err)
					}
				}
				_ = stream.CloseSend(err)
				return
			}
			_ = stream.CloseSend(stream.Send(res))
		},
		opts...,
	)
	handlers = append(handlers, check)

	watch := rerpc.NewHandler(
		rerpc.StreamTypeServer,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Watch",              // protobuf method
		func(ctx context.Context, sf rerpc.StreamFunc) {
			if ic != nil {
				sf = ic.WrapStream(sf)
			}
			stream := sf(ctx)
			typed := NewHealthReRPC_Watch(stream)
			var req HealthCheckRequest
			if err := stream.Receive(&req); err != nil {
				_ = stream.CloseReceive()
				_ = stream.CloseSend(err)
				return
			}
			if err := stream.CloseReceive(); err != nil {
				_ = stream.CloseSend(err)
				return
			}
			err := svc.Watch(stream.Context(), &req, typed)
			if err != nil {
				if _, ok := rerpc.AsError(err); !ok {
					if errors.Is(err, context.Canceled) {
						err = rerpc.Wrap(rerpc.CodeCanceled, err)
					}
					if errors.Is(err, context.DeadlineExceeded) {
						err = rerpc.Wrap(rerpc.CodeDeadlineExceeded, err)
					}
				}
			}
			_ = stream.CloseSend(err)
		},
		opts...,
	)
	handlers = append(handlers, watch)

	return handlers
}

var _ HealthReRPC = (*UnimplementedHealthReRPC)(nil) // verify interface implementation

// UnimplementedHealthReRPC returns CodeUnimplemented from all methods. To
// maintain forward compatibility, all implementations of HealthReRPC must embed
// UnimplementedHealthReRPC.
type UnimplementedHealthReRPC struct{}

func (UnimplementedHealthReRPC) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "internal.health.v1.Health.Check isn't implemented")
}

func (UnimplementedHealthReRPC) Watch(context.Context, *HealthCheckRequest, *HealthReRPC_Watch) error {
	return rerpc.Errorf(rerpc.CodeUnimplemented, "internal.health.v1.Health.Watch isn't implemented")
}

func (UnimplementedHealthReRPC) mustEmbedUnimplementedHealthReRPC() {}

// HealthClientReRPC_Watch is the client-side stream for the
// internal.health.v1.Health.Watch procedure.
type HealthClientReRPC_Watch struct {
	stream rerpc.Stream
}

func NewHealthClientReRPC_Watch(stream rerpc.Stream) *HealthClientReRPC_Watch {
	return &HealthClientReRPC_Watch{stream}
}

func (s *HealthClientReRPC_Watch) Receive() (*HealthCheckResponse, error) {
	var req HealthCheckResponse
	if err := s.stream.Receive(&req); err != nil {
		return nil, err
	}
	return &req, nil
}

func (s *HealthClientReRPC_Watch) Close() error {
	return s.stream.CloseReceive()
}

// HealthReRPC_Watch is the server-side stream for the
// internal.health.v1.Health.Watch procedure.
type HealthReRPC_Watch struct {
	stream rerpc.Stream
}

func NewHealthReRPC_Watch(stream rerpc.Stream) *HealthReRPC_Watch {
	return &HealthReRPC_Watch{stream}
}

func (s *HealthReRPC_Watch) Send(msg *HealthCheckResponse) error {
	return s.stream.Send(msg)
}
