// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc              v3.17.3
// source: grpc/reflection/v1alpha/reflection.proto

package reflectionv1alpha1

import (
	context "context"
	errors "errors"
	rerpc "github.com/rerpc/rerpc"
	callstream "github.com/rerpc/rerpc/callstream"
	handlerstream "github.com/rerpc/rerpc/handlerstream"
	v1alpha "github.com/rerpc/rerpc/internal/gen/proto/go/grpc/reflection/v1alpha"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// SimpleServerReflectionClient is a client for the
// internal.reflection.v1alpha1.ServerReflection service.
type SimpleServerReflectionClient interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context) *callstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]
}

// FullServerReflectionClient is a client for the
// internal.reflection.v1alpha1.ServerReflection service. It's more complex than
// SimpleServerReflectionClient, but it gives callers more fine-grained control
// (e.g., sending and receiving headers).
type FullServerReflectionClient interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context) *callstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]
}

// ServerReflectionClient is a client for the
// internal.reflection.v1alpha1.ServerReflection service.
type ServerReflectionClient struct {
	client fullServerReflectionClient
}

var _ SimpleServerReflectionClient = (*ServerReflectionClient)(nil)

// NewServerReflectionClient constructs a client for the
// internal.reflection.v1alpha1.ServerReflection service.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/grpc).
func NewServerReflectionClient(baseURL string, doer rerpc.Doer, opts ...rerpc.ClientOption) (*ServerReflectionClient, error) {
	baseURL = strings.TrimRight(baseURL, "/")
	serverReflectionInfoFunc, err := rerpc.NewClientStream(
		doer,
		rerpc.StreamTypeBidirectional,
		baseURL,
		"internal.reflection.v1alpha1", // protobuf package
		"ServerReflection",             // protobuf service
		"ServerReflectionInfo",         // protobuf method
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &ServerReflectionClient{client: fullServerReflectionClient{
		serverReflectionInfo: serverReflectionInfoFunc,
	}}, nil
}

// ServerReflectionInfo calls
// internal.reflection.v1alpha1.ServerReflection.ServerReflectionInfo.
func (c *ServerReflectionClient) ServerReflectionInfo(ctx context.Context) *callstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse] {
	return c.client.ServerReflectionInfo(ctx)
}

// Full exposes the underlying generic client. Use it if you need finer control
// (e.g., sending and receiving headers).
func (c *ServerReflectionClient) Full() FullServerReflectionClient {
	return &c.client
}

type fullServerReflectionClient struct {
	serverReflectionInfo rerpc.StreamFunc
}

var _ FullServerReflectionClient = (*fullServerReflectionClient)(nil)

// ServerReflectionInfo calls
// internal.reflection.v1alpha1.ServerReflection.ServerReflectionInfo.
func (c *fullServerReflectionClient) ServerReflectionInfo(ctx context.Context) *callstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse] {
	_, sender, receiver := c.serverReflectionInfo(ctx)
	return callstream.NewBidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse](sender, receiver)
}

// FullServerReflectionServer is a server for the
// internal.reflection.v1alpha1.ServerReflection service.
type FullServerReflectionServer interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error
}

// SimpleServerReflectionServer is a server for the
// internal.reflection.v1alpha1.ServerReflection service. It's a simpler
// interface than FullServerReflectionServer but doesn't provide header access.
type SimpleServerReflectionServer interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error
}

// NewFullServerReflectionHandler wraps each method on the service
// implementation in a rerpc.Handler. The returned slice can be passed to
// rerpc.NewServeMux.
func NewFullServerReflectionHandler(svc FullServerReflectionServer, opts ...rerpc.HandlerOption) []rerpc.Handler {
	handlers := make([]rerpc.Handler, 0, 1)

	serverReflectionInfo := rerpc.NewStreamingHandler(
		rerpc.StreamTypeBidirectional,
		"internal.reflection.v1alpha1", // protobuf package
		"ServerReflection",             // protobuf service
		"ServerReflectionInfo",         // protobuf method
		func(ctx context.Context, sender rerpc.Sender, receiver rerpc.Receiver) {
			typed := handlerstream.NewBidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse](sender, receiver)
			err := svc.ServerReflectionInfo(ctx, typed)
			_ = receiver.Close()
			if err != nil {
				if _, ok := rerpc.AsError(err); !ok {
					if errors.Is(err, context.Canceled) {
						err = rerpc.Wrap(rerpc.CodeCanceled, err)
					}
					if errors.Is(err, context.DeadlineExceeded) {
						err = rerpc.Wrap(rerpc.CodeDeadlineExceeded, err)
					}
				}
			}
			_ = sender.Close(err)
		},
		opts...,
	)
	handlers = append(handlers, *serverReflectionInfo)

	return handlers
}

type pluggableServerReflectionServer struct {
	serverReflectionInfo func(context.Context, *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error
}

func (s *pluggableServerReflectionServer) ServerReflectionInfo(ctx context.Context, stream *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error {
	return s.serverReflectionInfo(ctx, stream)
}

// NewServerReflectionHandler wraps each method on the service implementation in
// a rerpc.Handler. The returned slice can be passed to rerpc.NewServeMux.
//
// Unlike NewFullServerReflectionHandler, it allows the service to mix and match
// the signatures of FullServerReflectionServer and
// SimpleServerReflectionServer. For each method, it first tries to find a
// SimpleServerReflectionServer-style implementation. If a simple implementation
// isn't available, it falls back to the more complex
// FullServerReflectionServer-style implementation. If neither is available, it
// returns an error.
//
// Taken together, this approach lets implementations embed
// UnimplementedServerReflectionServer and implement each method using whichever
// signature is most convenient.
func NewServerReflectionHandler(svc any, opts ...rerpc.HandlerOption) ([]rerpc.Handler, error) {
	var impl pluggableServerReflectionServer

	// Find an implementation of ServerReflectionInfo
	if serverReflectionInfoer, ok := svc.(interface {
		ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error
	}); ok {
		impl.serverReflectionInfo = serverReflectionInfoer.ServerReflectionInfo
	} else {
		return nil, errors.New("no ServerReflectionInfo implementation found")
	}

	return NewFullServerReflectionHandler(&impl, opts...), nil
}

var _ FullServerReflectionServer = (*UnimplementedServerReflectionServer)(nil) // verify interface implementation

// UnimplementedServerReflectionServer returns CodeUnimplemented from all
// methods.
type UnimplementedServerReflectionServer struct{}

func (UnimplementedServerReflectionServer) ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[v1alpha.ServerReflectionRequest, v1alpha.ServerReflectionResponse]) error {
	return rerpc.Errorf(rerpc.CodeUnimplemented, "internal.reflection.v1alpha1.ServerReflection.ServerReflectionInfo isn't implemented")
}
