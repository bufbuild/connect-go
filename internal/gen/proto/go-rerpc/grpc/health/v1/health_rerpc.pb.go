// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc              v3.17.3
// source: grpc/health/v1/health.proto

package healthv1

import (
	context "context"
	errors "errors"
	rerpc "github.com/rerpc/rerpc"
	clientstream "github.com/rerpc/rerpc/clientstream"
	protobuf "github.com/rerpc/rerpc/codec/protobuf"
	handlerstream "github.com/rerpc/rerpc/handlerstream"
	v1 "github.com/rerpc/rerpc/internal/gen/proto/go/grpc/health/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// SimpleHealthClient is a client for the internal.health.v1.Health service.
type SimpleHealthClient interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *v1.HealthCheckRequest) (*clientstream.Server[v1.HealthCheckResponse], error)
}

// FullHealthClient is a client for the internal.health.v1.Health service. It's
// more complex than SimpleHealthClient, but it gives callers more fine-grained
// control (e.g., sending and receiving headers).
type FullHealthClient interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*clientstream.Server[v1.HealthCheckResponse], error)
}

// HealthClient is a client for the internal.health.v1.Health service.
type HealthClient struct {
	client fullHealthClient
}

var _ SimpleHealthClient = (*HealthClient)(nil)

// NewHealthClient constructs a client for the internal.health.v1.Health
// service. By default, it uses the binary protobuf codec.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/grpc).
func NewHealthClient(baseURL string, doer rerpc.Doer, opts ...rerpc.ClientOption) (*HealthClient, error) {
	baseURL = strings.TrimRight(baseURL, "/")
	opts = append([]rerpc.ClientOption{
		rerpc.Codec(protobuf.NameBinary, protobuf.NewBinary()),
	}, opts...)
	checkFunc, err := rerpc.NewClientFunc[v1.HealthCheckRequest, v1.HealthCheckResponse](
		doer,
		baseURL,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Check",              // protobuf method
		opts...,
	)
	if err != nil {
		return nil, err
	}
	watchFunc, err := rerpc.NewClientStream(
		doer,
		rerpc.StreamTypeServer,
		baseURL,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Watch",              // protobuf method
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return &HealthClient{client: fullHealthClient{
		check: checkFunc,
		watch: watchFunc,
	}}, nil
}

// Check calls internal.health.v1.Health.Check.
func (c *HealthClient) Check(ctx context.Context, req *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error) {
	res, err := c.client.Check(ctx, rerpc.NewRequest(req))
	if err != nil {
		return nil, err
	}
	return res.Msg, nil
}

// Watch calls internal.health.v1.Health.Watch.
func (c *HealthClient) Watch(ctx context.Context, req *v1.HealthCheckRequest) (*clientstream.Server[v1.HealthCheckResponse], error) {
	return c.client.Watch(ctx, rerpc.NewRequest(req))
}

// Full exposes the underlying generic client. Use it if you need finer control
// (e.g., sending and receiving headers).
func (c *HealthClient) Full() FullHealthClient {
	return &c.client
}

type fullHealthClient struct {
	check func(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error)
	watch rerpc.StreamFunc
}

var _ FullHealthClient = (*fullHealthClient)(nil)

// Check calls internal.health.v1.Health.Check.
func (c *fullHealthClient) Check(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error) {
	return c.check(ctx, req)
}

// Watch calls internal.health.v1.Health.Watch.
func (c *fullHealthClient) Watch(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest]) (*clientstream.Server[v1.HealthCheckResponse], error) {
	_, sender, receiver := c.watch(ctx)
	if err := sender.Send(req.Any()); err != nil {
		_ = sender.Close(err)
		_ = receiver.Close()
		return nil, err
	}
	if err := sender.Close(nil); err != nil {
		_ = receiver.Close()
		return nil, err
	}
	return clientstream.NewServer[v1.HealthCheckResponse](receiver), nil
}

// FullHealthServer is a server for the internal.health.v1.Health service.
type FullHealthServer interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *rerpc.Request[v1.HealthCheckRequest], *handlerstream.Server[v1.HealthCheckResponse]) error
}

// SimpleHealthServer is a server for the internal.health.v1.Health service.
// It's a simpler interface than FullHealthServer but doesn't provide header
// access.
type SimpleHealthServer interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *v1.HealthCheckRequest, *handlerstream.Server[v1.HealthCheckResponse]) error
}

// NewFullHealth wraps each method on the service implementation in a
// rerpc.Handler. The returned slice can be passed to rerpc.NewServeMux.
//
// By default, handlers support the binary protobuf and JSON codecs.
func NewFullHealth(svc FullHealthServer, opts ...rerpc.HandlerOption) *rerpc.Service {
	handlers := make([]rerpc.Handler, 0, 2)
	opts = append([]rerpc.HandlerOption{
		rerpc.Codec(protobuf.NameBinary, protobuf.NewBinary()),
		rerpc.Codec(protobuf.NameJSON, protobuf.NewJSON()),
	}, opts...)

	check, err := rerpc.NewUnaryHandler(
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Check",              // protobuf method
		svc.Check,
		opts...,
	)
	if err != nil {
		return rerpc.NewService(nil, err)
	}
	handlers = append(handlers, *check)

	watch, err := rerpc.NewStreamingHandler(
		rerpc.StreamTypeServer,
		"internal.health.v1", // protobuf package
		"Health",             // protobuf service
		"Watch",              // protobuf method
		func(ctx context.Context, sender rerpc.Sender, receiver rerpc.Receiver) {
			typed := handlerstream.NewServer[v1.HealthCheckResponse](sender)
			req, err := rerpc.ReceiveRequest[v1.HealthCheckRequest](receiver)
			if err != nil {
				_ = receiver.Close()
				_ = sender.Close(err)
				return
			}
			if err = receiver.Close(); err != nil {
				_ = sender.Close(err)
				return
			}
			err = svc.Watch(ctx, req, typed)
			if err != nil {
				if _, ok := rerpc.AsError(err); !ok {
					if errors.Is(err, context.Canceled) {
						err = rerpc.Wrap(rerpc.CodeCanceled, err)
					}
					if errors.Is(err, context.DeadlineExceeded) {
						err = rerpc.Wrap(rerpc.CodeDeadlineExceeded, err)
					}
				}
			}
			_ = sender.Close(err)
		},
		opts...,
	)
	if err != nil {
		return rerpc.NewService(nil, err)
	}
	handlers = append(handlers, *watch)

	return rerpc.NewService(handlers, nil)
}

type pluggableHealthServer struct {
	check func(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error)
	watch func(context.Context, *rerpc.Request[v1.HealthCheckRequest], *handlerstream.Server[v1.HealthCheckResponse]) error
}

func (s *pluggableHealthServer) Check(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error) {
	return s.check(ctx, req)
}

func (s *pluggableHealthServer) Watch(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest], stream *handlerstream.Server[v1.HealthCheckResponse]) error {
	return s.watch(ctx, req, stream)
}

// NewHealth wraps each method on the service implementation in a rerpc.Handler.
// The returned slice can be passed to rerpc.NewServeMux.
//
// Unlike NewFullHealth, it allows the service to mix and match the signatures
// of FullHealthServer and SimpleHealthServer. For each method, it first tries
// to find a SimpleHealthServer-style implementation. If a simple implementation
// isn't available, it falls back to the more complex FullHealthServer-style
// implementation. If neither is available, it returns an error.
//
// Taken together, this approach lets implementations embed
// UnimplementedHealthServer and implement each method using whichever signature
// is most convenient.
func NewHealth(svc any, opts ...rerpc.HandlerOption) *rerpc.Service {
	var impl pluggableHealthServer

	// Find an implementation of Check
	if checker, ok := svc.(interface {
		Check(context.Context, *v1.HealthCheckRequest) (*v1.HealthCheckResponse, error)
	}); ok {
		impl.check = func(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error) {
			res, err := checker.Check(ctx, req.Msg)
			if err != nil {
				return nil, err
			}
			return rerpc.NewResponse(res), nil
		}
	} else if checker, ok := svc.(interface {
		Check(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error)
	}); ok {
		impl.check = checker.Check
	} else {
		return rerpc.NewService(nil, errors.New("no Check implementation found"))
	}

	// Find an implementation of Watch
	if watcher, ok := svc.(interface {
		Watch(context.Context, *v1.HealthCheckRequest, *handlerstream.Server[v1.HealthCheckResponse]) error
	}); ok {
		impl.watch = func(ctx context.Context, req *rerpc.Request[v1.HealthCheckRequest], stream *handlerstream.Server[v1.HealthCheckResponse]) error {
			return watcher.Watch(ctx, req.Msg, stream)
		}
	} else if watcher, ok := svc.(interface {
		Watch(context.Context, *rerpc.Request[v1.HealthCheckRequest], *handlerstream.Server[v1.HealthCheckResponse]) error
	}); ok {
		impl.watch = watcher.Watch
	} else {
		return rerpc.NewService(nil, errors.New("no Watch implementation found"))
	}

	return NewFullHealth(&impl, opts...)
}

var _ FullHealthServer = (*UnimplementedHealthServer)(nil) // verify interface implementation

// UnimplementedHealthServer returns CodeUnimplemented from all methods.
type UnimplementedHealthServer struct{}

func (UnimplementedHealthServer) Check(context.Context, *rerpc.Request[v1.HealthCheckRequest]) (*rerpc.Response[v1.HealthCheckResponse], error) {
	return nil, rerpc.Errorf(rerpc.CodeUnimplemented, "internal.health.v1.Health.Check isn't implemented")
}

func (UnimplementedHealthServer) Watch(context.Context, *rerpc.Request[v1.HealthCheckRequest], *handlerstream.Server[v1.HealthCheckResponse]) error {
	return rerpc.Errorf(rerpc.CodeUnimplemented, "internal.health.v1.Health.Watch isn't implemented")
}
