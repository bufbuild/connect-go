// Code generated by protoc-gen-go-rerpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-rerpc v0.0.1
// - protoc             v3.17.3
// source: internal/reflection/v1alpha1/reflection.proto

package reflectionpb

import (
	context "context"
	errors "errors"
	rerpc "github.com/rerpc/rerpc"
	callstream "github.com/rerpc/rerpc/callstream"
	handlerstream "github.com/rerpc/rerpc/handlerstream"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the
// rerpc package are compatible. If you get a compiler error that this constant
// isn't defined, this code was generated with a version of rerpc newer than the
// one compiled into your binary. You can fix the problem by either regenerating
// this code with an older version of rerpc or updating the rerpc version
// compiled into your binary.
const _ = rerpc.SupportsCodeGenV0 // requires reRPC v0.0.1 or later

// ServerReflectionClientReRPC is a client for the
// internal.reflection.v1alpha1.ServerReflection service.
type ServerReflectionClientReRPC interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(ctx context.Context) *callstream.Bidirectional[ServerReflectionRequest, ServerReflectionResponse]
}

type serverReflectionClientReRPC struct {
	doer    rerpc.Doer
	baseURL string
	options []rerpc.CallOption
}

// NewServerReflectionClientReRPC constructs a client for the
// internal.reflection.v1alpha1.ServerReflection service. Call options passed
// here apply to all calls made with this client.
//
// The URL supplied here should be the base URL for the gRPC server (e.g.,
// https://api.acme.com or https://acme.com/grpc).
func NewServerReflectionClientReRPC(baseURL string, doer rerpc.Doer, opts ...rerpc.CallOption) ServerReflectionClientReRPC {
	return &serverReflectionClientReRPC{
		baseURL: strings.TrimRight(baseURL, "/"),
		doer:    doer,
		options: opts,
	}
}

// ServerReflectionInfo calls
// internal.reflection.v1alpha1.ServerReflection.ServerReflectionInfo. Call
// options passed here apply only to this call.
func (c *serverReflectionClientReRPC) ServerReflectionInfo(ctx context.Context) *callstream.Bidirectional[ServerReflectionRequest, ServerReflectionResponse] {
	ctx, call := rerpc.NewClientStream(
		ctx,
		c.doer,
		rerpc.StreamTypeBidirectional,
		c.baseURL,
		"internal.reflection.v1alpha1", // protobuf package
		"ServerReflection",             // protobuf service
		"ServerReflectionInfo",         // protobuf method
		c.options...,
	)
	stream := call(ctx)
	return callstream.NewBidirectional[ServerReflectionRequest, ServerReflectionResponse](stream)
}

// ServerReflectionReRPC is a server for the
// internal.reflection.v1alpha1.ServerReflection service. To make sure that
// adding methods to this protobuf service doesn't break all implementations of
// this interface, all implementations must embed
// UnimplementedServerReflectionReRPC.
//
// By default, recent versions of grpc-go have a similar forward compatibility
// requirement. See https://github.com/grpc/grpc-go/issues/3794 for a longer
// discussion.
type ServerReflectionReRPC interface {
	// The reflection service is structured as a bidirectional stream, ensuring
	// all related requests go to a single server.
	ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[ServerReflectionRequest, ServerReflectionResponse]) error
	mustEmbedUnimplementedServerReflectionReRPC()
}

// NewServerReflectionHandlerReRPC wraps each method on the service
// implementation in a *rerpc.Handler. The returned slice can be passed to
// rerpc.NewServeMux.
func NewServerReflectionHandlerReRPC(svc ServerReflectionReRPC, opts ...rerpc.HandlerOption) []*rerpc.Handler {
	handlers := make([]*rerpc.Handler, 0, 1)

	serverReflectionInfo := rerpc.NewStreamingHandler(
		rerpc.StreamTypeBidirectional,
		"internal.reflection.v1alpha1", // protobuf package
		"ServerReflection",             // protobuf service
		"ServerReflectionInfo",         // protobuf method
		func(ctx context.Context, sf rerpc.StreamFunc) {
			stream := sf(ctx)
			typed := handlerstream.NewBidirectional[ServerReflectionRequest, ServerReflectionResponse](stream)
			err := svc.ServerReflectionInfo(stream.Context(), typed)
			_ = stream.CloseReceive()
			if err != nil {
				if _, ok := rerpc.AsError(err); !ok {
					if errors.Is(err, context.Canceled) {
						err = rerpc.Wrap(rerpc.CodeCanceled, err)
					}
					if errors.Is(err, context.DeadlineExceeded) {
						err = rerpc.Wrap(rerpc.CodeDeadlineExceeded, err)
					}
				}
			}
			_ = stream.CloseSend(err)
		},
		opts...,
	)
	handlers = append(handlers, serverReflectionInfo)

	return handlers
}

var _ ServerReflectionReRPC = (*UnimplementedServerReflectionReRPC)(nil) // verify interface implementation

// UnimplementedServerReflectionReRPC returns CodeUnimplemented from all
// methods. To maintain forward compatibility, all implementations of
// ServerReflectionReRPC must embed UnimplementedServerReflectionReRPC.
type UnimplementedServerReflectionReRPC struct{}

func (UnimplementedServerReflectionReRPC) ServerReflectionInfo(context.Context, *handlerstream.Bidirectional[ServerReflectionRequest, ServerReflectionResponse]) error {
	return rerpc.Errorf(rerpc.CodeUnimplemented, "internal.reflection.v1alpha1.ServerReflection.ServerReflectionInfo isn't implemented")
}

func (UnimplementedServerReflectionReRPC) mustEmbedUnimplementedServerReflectionReRPC() {}
